Z80 RLEWB for SDCC & Assembler

Version: 1.3
Date: 24 March 2020
Author: mvac7/303bcn
Architecture: MSX
Programming language: C & Assembler
mail: mvac7303b@gmail.com


<<<   Sorry!   This text is pending correction of the English translation    >>>


History of versions:
- v1.1 (26 jun 2014) First version 
- v1.2 (20 April 2019) optimized and first version on github
- v1.3 (24 March 2020) SDsnatcher Issue #1 - Enhanced to pass the Acid2Test 



--------------------------------------------------------------------------------
Index:

1 Introduction
2 Acknowledgments.
3 Requirements

4 Encoder description

5 unRLEWBtoRAM Functions  (SDCC)
  5.1 unRLEWBtoRAM  (C)
  5.2 unRLEWBRAM    (for Assembler inline)
  
6 unRLEWBtoVRAM Functions (SDCC)
  6.1 unRLEWBtoVRAM (C)
  6.2 unRLEWBVRAM   (for Assembler inline)
    
7 unRLEWBtoRAM (Assembler)

8 unRLEWBtoVRAM (Assembler) 


--------------------------------------------------------------------------------
1. Introduction:

This project is an Open Source library.

Object functions for C (SDCC), and Z80 Assembler source for decompress RLEWB 
data encoding.  

RLEWB is a compressor of the RLE type, with the advantage that it improves the 
results in data sequences where there are not many series of repeated values, 
because it does not penalize for the simple values.

It is designed for graphic data of the TMS9918A.
  
Includes applications for testing and learning purposes.



--------------------------------------------------------------------------------
2. Acknowledgments
  
  Thanks for Info & help, to:

  SMS Power > http://www.smspower.org/Development/Index
  SDsnatcher > https://github.com/sdsnatcher
  Avelino Herrera > http://msx.atlantes.org/index_es.html
  Nerlaska > http://albertodehoyonebot.blogspot.com.es
  Fubu > http://www.gamerachan.org/fubu/
  Marq/Lieves!Tuore > http://www.kameli.net/lt/
  Sapphire/Z80ST > http://z80st.auic.es/
  Pentacour > http://pentacour.com/
  JamQue/TPM > http://www.thepetsmode.com/
  Andrear > http://andrear.altervista.org/home/msxsoftware.php
  Konamiman > https://www.konamiman.com
  MSX Assembly Page > http://map.grauw.nl/resources/msxbios.php
  Portar MSX Tech Doc > http://nocash.emubase.de/portar.htm
  MSX Resource Center > http://www.msx.org/
  Karoshi MSX Community > http://karoshi.auic.es/
  BlueMSX >> http://www.bluemsx.com/
  OpenMSX >> http://openmsx.sourceforge.net/
  Meisei  >> ?



--------------------------------------------------------------------------------
3. Requirements:

For C:
 * Small Device C Compiler (SDCC) v3.6 
   http://sdcc.sourceforge.net/
     
 * Hex2bin v2.2 
   http://hex2bin.sourceforge.net/


For Assembler:

 * asMSX
   https://github.com/Fubukimaru/asMSX/releases/


Or:

 * Sjasm (by XL2S Entertainment)
   http://www.xl2s.tk/



--------------------------------------------------------------------------------
4 Encoder description

 CD = Control Digit = $80

 CD + $0         --> When the value to be written to the output is equal to the 
                     Control Digit
 CD + $FF        --> End - Decompressed until it finds this value.
 CD + nn + dd    --> Repeat nn ($1-$FE)+1 dd value
 dd (!= CD)      --> Raw data. Values without repetition.	
 
--------------------------------------------------------------------------------
5 unRLEWBtoRAM Functions (SDCC)



5.1 unRLEWBtoRAM (C)

 void unRLEWBtoRAM (unsigned int sourceADDR, unsigned int targetADDR)
 
 Function : Decompress RLEWB data to RAM 
 Input    : [unsigned int] source RAM RLE data address
            [unsigned int] target RAM address       
 Output   : -
 
 Examples : (unRLEWB_C/examples/toRAM/test01_SDCC)
            
          // RLE WB compressed - Original size= 2048 - Compress size= 33
          const char DATA_COL[]={
            0x80,0xFE,0xFC,0x80,0xFE,0xFC,0xFC,0xFC,0x80,0x3F,0xF2,0x80,
            0x0F,0x51,0x80,0x0F,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80,
            0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80,
            0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80,
            0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80,
            0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80,
            0x07,0x51,0x80,0xB7,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80,
            0x0F,0x51,0x80,0x0F,0xF2,0x80,0x17,0x51,0x80,0x67,0xF2,0x80,
            0xFE,0xF3,0x80,0xFE,0xF3,0xF3,0xF3,0x80,0xFF};
          
          unRLEWBtoRAM ((unsigned int) DATA_COL, 0xD000);




5.2 unRLEWBRAM (for Assembler inline)

 Function : Decompress RLEWB data to RAM
     
 Input    : HL - source RAM RLE WB data address
            DE - target RAM address
 Output   : -
 
 Examples : (unRLEWB_C/examples/toRAM/test02_SDCC)
 
            ;decompress to RAM
            ld   HL,#DATA_COL
            ld   DE,#0xD000 
            call unRLEWBRAM
            
            ;copy to VRAM
            ld   HL,#0xD000 ;RAM addr
            ld   DE,#0x2000 ;VRAM addr
            ld   BC,#0x800  ;length
            call 0x005C     ;LDIRVM
            
            ret
            
          DATA_COL:
            .db 0x80,0xFE,0xFC,0x80,0xFE,0xFC,0xFC,0xFC,0x80,0x3F,0xF2,0x80
            .db 0x0F,0x51,0x80,0x0F,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80
            .db 0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80
            .db 0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80
            .db 0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80
            .db 0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80
            .db 0x07,0x51,0x80,0xB7,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80
            .db 0x0F,0x51,0x80,0x0F,0xF2,0x80,0x17,0x51,0x80,0x67,0xF2,0x80
            .db 0xFE,0xF3,0x80,0xFE,0xF3,0xF3,0xF3,0x80,0xFF


 

--------------------------------------------------------------------------------
6 unWBRLE2VRAM Functions (SDCC)



6.1 unRLEWBtoVRAM (C)

 void unRLEWBtoVRAM (unsigned int RAM, unsigned int VRAM)
 
 Function : Decompress RLEWB data to VRAM
  
 Input    : [unsigned int] source RAM RLE data address
            [unsigned int] target VRAM address       
 Output   : -
 
 Examples : (unRLEWB_C/examples/toVRAM/test03_SDCC) 
            
          // RLE WB compressed - Original size= 2048 - Compress size= 33
          const char DATA_COL[]={
            0x80,0xFE,0xFC,0x80,0xFE,0xFC,0xFC,0xFC,0x80,0x3F,0xF2,0x80,
            0x0F,0x51,0x80,0x0F,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80,
            0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80,
            0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80,
            0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80,
            0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80,
            0x07,0x51,0x80,0xB7,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80,
            0x0F,0x51,0x80,0x0F,0xF2,0x80,0x17,0x51,0x80,0x67,0xF2,0x80,
            0xFE,0xF3,0x80,0xFE,0xF3,0xF3,0xF3,0x80,0xFF};
          
          unRLEWBtoVRAM ((unsigned int) DATA_COL, 0x2000);
          
          


6.2 unRLEWBVRAM (for Assembler inline)

 Function : Decompress RLEWB data to VRAM
     
 Input    : HL - source RAM RLEWB data address
            DE - target VRAM address
 Output   : -
 
 Examples : (unRLEWB_C/examples/toVRAM/test04_SDCC_AsmInline) 
 
            ld   HL,#DATA_COL
            ld   DE,#0x2000   ;BASE11 Color Table
            call unRLEWBVRAM
            
            ret
            
            
          ; RLE WB compressed - Original size= 2048 - Compress size= 105  
          DATA_COL:
            .db 0x80,0xFE,0xFC,0x80,0xFE,0xFC,0xFC,0xFC,0x80,0x3F,0xF2,0x80
            .db 0x0F,0x51,0x80,0x0F,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80
            .db 0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80
            .db 0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80
            .db 0x07,0x51,0x80,0xAF,0xF2,0x80,0x07,0x51,0x80,0x17,0xF2,0x80
            .db 0x07,0x51,0x80,0x0F,0xF2,0x80,0x07,0x51,0x80,0x07,0xF2,0x80
            .db 0x07,0x51,0x80,0xB7,0xF2,0x80,0x0F,0x51,0x80,0x0F,0xF2,0x80
            .db 0x0F,0x51,0x80,0x0F,0xF2,0x80,0x17,0x51,0x80,0x67,0xF2,0x80
            .db 0xFE,0xF3,0x80,0xFE,0xF3,0xF3,0xF3,0x80,0xFF


            
--------------------------------------------------------------------------------
7 unRLEWBtoRAM (Assembler)

 Function : Decompress RLEWB data to RAM
            Valid for asMSX and Sjasm.
     
 Input    : HL - source RAM RLE data address
            DE - target RAM address
 Output   : -
 
 Examples : (unRLEWB_ASM/examples/test03_toRAM_Sjasm)
            ;decompress to RAM
            ld   HL,DATA_COL
            ld   DE,0xD000
            call unRLEWBtoRAM
            
            ;copy to VRAM
            ld   HL,#0xD000 ;RAM addr
            ld   DE,#0x2000 ;VRAM addr
            ld   BC,#800    ;length
            call 0x005C     ;LDIRVM
            
            ret
          
          ; RLE WB compressed - Original size= 2048 - Compress size= 105  
          DATA_COL:
            db $80,$FE,$FC,$80,$FE,$FC,$FC,$FC,$80,$3F,$F2,$80,$0F,$51,$80,$0F
            db $F2,$80,$0F,$51,$80,$0F,$F2,$80,$07,$51,$80,$AF,$F2,$80,$07,$51
            db $80,$17,$F2,$80,$07,$51,$80,$0F,$F2,$80,$07,$51,$80,$07,$F2,$80
            db $07,$51,$80,$AF,$F2,$80,$07,$51,$80,$17,$F2,$80,$07,$51,$80,$0F
            db $F2,$80,$07,$51,$80,$07,$F2,$80,$07,$51,$80,$B7,$F2,$80,$0F,$51
            db $80,$0F,$F2,$80,$0F,$51,$80,$0F,$F2,$80,$17,$51,$80,$67,$F2,$80
            db $FE,$F3,$80,$FE,$F3,$F3,$F3,$80,$FF




--------------------------------------------------------------------------------
8 unRLEWBtoVRAM (Assembler)

 Function : Decompress RLEWB data to VRAM
            Valid for asMSX and Sjasm.
            
 Input    : HL - source RAM RLE data address
            DE - target VRAM address
 Output   : -
 
 Examples : (unRLEWB_ASM/examples/test02_toVRAM_Sjasm)
 
            ld   HL,DATA_COL
            ld   DE,$2000   ;BASE11 Color Table
            call unRLEWBtoVRAM            
            ret
          
          ; RLE WB compressed - Original size= 2048 - Compress size= 105  
          DATA_COL:
            db $80,$FE,$FC,$80,$FE,$FC,$FC,$FC,$80,$3F,$F2,$80,$0F,$51,$80,$0F
            db $F2,$80,$0F,$51,$80,$0F,$F2,$80,$07,$51,$80,$AF,$F2,$80,$07,$51
            db $80,$17,$F2,$80,$07,$51,$80,$0F,$F2,$80,$07,$51,$80,$07,$F2,$80
            db $07,$51,$80,$AF,$F2,$80,$07,$51,$80,$17,$F2,$80,$07,$51,$80,$0F
            db $F2,$80,$07,$51,$80,$07,$F2,$80,$07,$51,$80,$B7,$F2,$80,$0F,$51
            db $80,$0F,$F2,$80,$0F,$51,$80,$0F,$F2,$80,$17,$51,$80,$67,$F2,$80
            db $FE,$F3,$80,$FE,$F3,$F3,$F3,$80,$FF 